작업폴더에서 git 쓰고 싶으면 터미널에 (git init) 부터 입력

파일 현재상태를 기록해두려면 (git add 파일명)
(git commit -m '메모')

[작업폴더] --(git add)--> [staging area] --(git commit)--> [repository]

여러파일 스테이징 하려면 
(git add 파일1 파일2)
ex) (git add app.txt app2.txt)

모든파일 스테이징하려면 
(git add .)

상태창열기
(git status)

commit내역 조회
(git log --all --oneline) (git log --all --oneline --graph)   종료 = q

작업덩어리 하나 완성 수정 됬을때 마다 쓰는거 장려!

최근 commit vs 현재파일 차이점 보여줌
(git diff) 혹은 (git difftool)  종료 = :qa

특정commit vs 현재파일 차이점 보여줌
(git difftool 커밋아이디)

특정commit vs 다른특정commit 차이점 보여줌
(git difftool 커밋아이디 다른커밋아이디)

그냥 vscode에 있는 소스제어에서 확장설치한 git graph같은 기능 쓰는게 보기 쉬움

원본파일에 새로운코드 짜다가 망칠우려가 클때 복사본을 만들어서 거기에 먼저 코드짜보셈
- 파일 복붙해도되지만 git branch 기능이 있음
- 브랜치 생성 (git branch 작명)
- 브랜치로 이동 (git switch 아까작명했던거)

master(main)에서 새로생성됬던 브랜치를 합치길 원할경우
(git merge 합칠브랜치이름) 
ex)
- master 에서 a번파일 수정, 타브랜치에서 b번파일 수정 => 해피엔딩
- master 에서 a번파일 1번줄 수정, 타브랜치에서 a번파일 1번줄 수정 => 충돌(conflict)

다양한 브랜치 합치는 경우
case 1. 각 브랜치에서 신규 commit 이 있는 경우 - 3-way merge 위에 처럼 함

case 2. 기준 브랜치에 신규 commit 이 없는 경우 - 새로운 브랜치가 master(main)브랜치로 지칭함 fast-forward merge라 함
        기준이 되는 브랜치에 신규 commit이 없으면 자동으로 fast-forward merge가 발동됨 
        그게 싫다면 (git merge --no-ff 브랜드명)해서 강제로 3-way merge 할수도 있음

# merge 완료된 브랜치 삭제는 (git branch -d 브랜치명)
# merge 안한 브랜치 삭제는 (git branch -D 브랜치명)

merge말고 다른방식으로 합칠수 있음
rebase 써도 브랜치 합칠수 있음

case 3. git rebase & merge 기준이 되는 브랜치에서 가장 최근 commit이 아닌 상태에서 파생된 신규 브랜치 commit들이 있을때 
        즉 3-way 상태를 rebase로 브랜치의 시작점을 master브랜치의 최근 커밋으로 옮겨서 fast-forward merge하게 함
        예시1) masterBranch commit1 - commit2 - commit3
              newBranch               ㄴcommit2-1 - commit2-2

        예시2) masterBranch commit1 - commit2 - commit3
               newBranch                                ㄴ commit2-1 - commit2-2

        쓰는 이유 : 3-way merge는 나중에 git log 출력할때 복잡해보임
        단점 : conflict 엔딩 많이 남

        쓰는 법 : 1. 새로운브랜치(newBranch)로 이동해서
                  2. (git rebase 중심브랜치명(master나 main)) -- 여기까지 rebase
                  3. 중심브랜치로 이동해서
                  4. (git merge 새로운브랜치명)

case 4. squash and merge
        새로운 브랜치에 있는 commit들을 다 합쳐서 master브랜치에 새로운 commit으로 만들어줌
        예시1) masterBranch commit1 - commit2 - commit3
              newBranch               ㄴcommit2-1 - commit2-2
        예시2) masterBranch commit1 - commit2 - commit3 - commit4 (newBranch)              

        쓰는 이유 : git merge를 계속하다보면 git commit 내역들이 더러워짐 master(main)브랜치 로그만 보고싶어도 다른 브랜치도 나옴 그 선을 끊는 방법은 rebase도 있지만 squash and merge쓸수 있음                     

        쓰는 법 : (git merge --squash 새브랜치)


코드짜다가 실수했을떄 되돌아가자
git은 파일복구가능, commit복구 가능,과거로 이동 가능함

특정 파일을 최근 commit으로 복구하는법 
(git restore 파일명)

특정 파일을 특정 commit 시점으로 복구하는법
(git restore --source 커밋아이디 파일명)

특정파일을 add해놓은걸 staging취소 하고싶을때
(git restore --staged 파일명)


특정 commit 취소하는법 : 전에 어떤 커밋을 삭제하진 못하고 그 커밋을 취소하고 작업했던 새로 그 당시 작업했던게 사라진 버전의 commit이 생성됨 
예) a,b,c파일 순서대로 추가하면서 각각 commit을 만들었을떄 b를 생성했을떄 작업내역을 없애고 싶으면 a,c만 있는 새로운버전의 commit이 생김
(git revert 커밋아이디)

특정commit 여러개 동시에 취소가능
(git revert 커밋아이디1 커밋아이디2)

최근 commit취소가능
(git revert HEAD)


과거로 모든걸 되돌리기 : 위험함
(git reset --hard 커밋아이디)

과거로 되돌리지만 변동사항을 지우지말고 스테이징해놓기
(git reset --soft 커밋아이디)

과거로 되돌리지만 변동사항을 지우지말고 unstage해놓기
(git reset --mixed 커밋아이디)


로컬저장소 -> 원격저장소 업로드
(git push -u 원격저장소주소 올릴로컬브랜치명) 
        # 보통 -u 는 추가하면 주소 기억하라는 뜻 그 다음부터는 (git push) 만 해도 했던 주소로 된다지만 '난 실패함'

원격저장소주소 변수로 만들기 : 여기선 origin으로 함
(git remote add 변수명 원격저장소주소)



원격저장소 복제는 
(git clone 원격저장소주소)

팀원과 공동작업 하고 싶으면 그 팀원도 github 아이디가 있어야하고
setting에서 collaborators에서 팀원 github 아이디 등록해놔야 git push 가능
        # 다른 팀원이 최근 git push 했으면 나는 git push 못한다함
          아무튼 안된다고 가정하고 git pull 해야함

원격저장소 -> 로컬저장소
(git pull 원격저장소주소 브랜치명) 
        # git pull은 git fetch + git merge 임 ( conflict 발생 가능)
        git fetch : 원격저장소 신규 commit 가져오세요

github 사이트에서 pull request로 merge가능

프로젝트가 커져도, 사람 많아도 branch, merge 깔끔하게 하고싶으면 
git flow / github flow / trunk-based / gitlab flow 등 여러가지전략이 있음


git flow 방법은 
1, main  2, develop  3, feature  4, release  5, hotfix 이렇게 다섯개의 브랜치를 운영함

git flow 사용법) 지금까지 작성한 코드를 main브랜치(v 0.9)에 보관하고, develop(복사본)을 만듬
        하지만 develop에 새로운 기능 바로 넣으면 안되고 feature에 신기능을 개발해보고 잘되면 develop에 merge함
        예를 들어 guild기능이 필요하면 feature/guild 이런식으로 friends기능이 필요하면 feature/friends 이런식으로
        만들고 잘되면 develop에 합치는 식으로 진행함 
        develop이 어느정도 완성된거 같아서 (v 1.0)로 출시하고 싶으면 안전하게 
        임시 브랜치로 release브랜치 생성해서 테스트 해봄 완성되면 main브랜치와 merge함
        그리고 develop에도 개발이 진행되야 하기 때문에 release를 develop 브랜치와도 merge해야함
        이미 출시되고 버그수정을 할때는 빠른 수정을 위해 hotfix브랜치 생성해서 수정후 main과 develop에 같이 merge함
        
장점 : 안정적으로 버전별 배포가능
단점 : CI/CD 이런거 하는곳은 안좋아함


trunk-based 방법 : 브랜치 하나만 잘관리하자
trunk-based 사용법 : main브랜치만 쓰고 기능개발할때만 feature 생성해서 적용함

장점 : 브랜치를 많이 관리 안해도됨
단점 : 테스트 많이,자주 해야함
# 안정화된 프로젝트들이 잘씀

